Script started on Sun 06 Nov 2011 08:23:12 PM PST
[wyung@pc10 ~/gdb]$ gdb a.out
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
(gdb) h
List of classes of commands:

aliases -- Aliases of other commands
breakpoints -- Making program stop at certain points
data -- Examining data
files -- Specifying and examining files
internals -- Maintenance commands
obscure -- Obscure features
running -- Running the program
stack -- Examining the stack
status -- Status inquiries
support -- Support facilities
tracepoints -- Tracing of program execution without stopping the program
user-defined -- User-defined commands

Type "help" followed by a class name for a list of commands in that class.
Type "help all" for the list of all commands.
Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) r
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20

Program received signal SIGSEGV, Segmentation fault.
0x4827870d in _IO_vfscanf_internal () from /lib/libc.so.6
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) bt
#0  0x4827870d in _IO_vfscanf_internal () from /lib/libc.so.6
#1  0x482825cb in __isoc99_scanf () from /lib/libc.so.6
#2  0x08048470 in main () at main.c:17
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) quit
[wyung@pc10 ~/gdb]$ 
a.out*      core        main.c      prime.c     typescript  
[wyung@pc10 ~/gdb]$ gdb a.out core
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
[New LWP 4678]
Missing separate debuginfo for 
Try: yum --disablerepo='*' --enablerepo='*-debuginfo' install /usr/lib/debug/.build-id/fb/1ed12562a67a061420bf6fa6361f826b98b74d
Core was generated by `a.out'.
Program terminated with signal 11, Segmentation fault.
#0  0x4827870d in _IO_vfscanf_internal () from /lib/libc.so.6
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) bt
#0  0x4827870d in _IO_vfscanf_internal () from /lib/libc.so.6
#1  0x482825cb in __isoc99_scanf () from /lib/libc.so.6
#2  0x08048470 in main () at main.c:17
(gdb) l 17
12	int main()
13	{
14	  int i;
15	
16	  printf("Enter upper bound:\n");
17	  scanf("%d", UpperBound);
18	
19	  Prime[1] = 1;
20	  Prime[2] = 1;
21	
(gdb) 
22	  for (i = 3; i <= UpperBound; i += 2) {
23	    CheckPrime(i, Prime);
24	    if (Prime[i]) 
25	      printf("%d is a prime\n", i);
26	  }
27	
28	  return 0;
29	} /* main() */
(gdb) 1 main.cL171 [1P[1@l main.cL[1P[1P[1@c[1@:17
12	int main()
13	{
14	  int i;
15	
16	  printf("Enter upper bound:\n");
17	  scanf("%d", UpperBound);
18	
19	  Prime[1] = 1;
20	  Prime[2] = 1;
21	
(gdb) 1 l main
8	
9	int Prime[50],  /* Prime[i] will be 1 if i is prime, 0 otherwise */
10	UpperBound; /* check all number up through this one for primeness */
11	
12	int main()
13	{
14	  int i;
15	
16	  printf("Enter upper bound:\n");
17	  scanf("%d", UpperBound);
(gdb)  gcc    q
[wyung@pc10 ~/gdb]$ 
a.out*      core        main.c      prime.c     typescript  
[wyung@pc10 ~/gdb]$ vi mi[Kain.c
7[?47h[27m[24m[0m[H[J[25;1H"main.c" 29L, 695C[1;1H[1m[36m/* prime-number finding program

 Will (after bugs are fixed) report a list of all primes which are  less than
 or equal to the user-supplied upper bound.   It is riddled with errors! */[0m

[1m[34m#include [0m[1m[35m<stdio.h>[0m
[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[]); [1m[36m/* prototype for function in prime.c */[0m

[1m[32mint[0m Prime[[1m[35m50[0m],  [1m[36m/* Prime[i] will be 1 if i is prime, 0 otherwise */[0m
UpperBound; [1m[36m/* check all number up through this one for primeness */[0m

[1m[32mint[0m main()
{
  [1m[32mint[0m i;

  [30m[43mprintf[0m([1m[35m"Enter upper bound:[0m[1m[31m\n[0m[1m[35m"[0m);
  scanf([1m[35m"[0m[1m[31m%d[0m[1m[35m"[0m, UpperBound);

  Prime[[1m[35m1[0m] = [1m[35m1[0m;
  Prime[[1m[35m2[0m] = [1m[35m1[0m;

  [1m[33mfor[0m (i = [1m[35m3[0m; i <= UpperBound; i += [1m[35m2[0m) {
    CheckPrime(i, Prime);
    [1m[33mif[0m (Prime[i])[25;63H1,1[11CTop[1;1H[25;63H2,0-1[2;1H[25;63H3,1  [3;1H[25;63H4[4;1H[25;63H5,0-1[5;1H[25;63H6,1  [6;1H[25;63H7[7;1H[25;63H8,0-1[8;1H[25;63H9,1  [9;1H[25;63H10,1[10;1H[25;64H1,0-1[11;1H[25;64H2,1  [12;1H[25;64H3[13;1H[25;64H4[14;1H[25;64H5,0-1[15;1H[25;64H6,1  [16;1H[25;64H7[17;1H[25;66H2[17;2H[25;66H3[17;3H[25;66H4[17;4H[25;66H5[17;5H[25;66H6[17;6H[25;66H7[17;7Hf[46m([16C)[0m[25;66H8[17;8H([16C)[25;66H9[17;9H[25;66H10[17;10H[25;67H1[17;11H[25;67H2[17;12H[25;67H3[17;13H[25;67H4[17;14H[25;67H5[17;15H[25;67H6[17;16H[25;67H7[17;17H[25;67H8[17;18H[25;67H7[17;17H[25;67H6[17;16H[25;67H5[17;15H[25;1H[K[25;1H:s[1m[37m[41mE33: No previous substitute regular expression[0m[16C17,15[9CTop[17;15H[25;1H[1m-- INSERT --[0m[25;13H[K[25;63H17,15[9CTop[17;15H&UpperBound);[25;67H6[17;16H[25;67H5[17;15H[25;67H6[17;16H[25;1H[K[17;15H[25;63H17,15[9CTop[17;15H[25;63H[K[25;1H:wq"main.c" 29L, 696C written
[2J[?47l8[wyung@pc10 ~/gdb]$ gcc ma[K[K-g main.c prime.c
[wyung@pc10 ~/gdb]$ gdb
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
(gdb) q
[wyung@pc10 ~/gdb]$ gdb a.out
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
(gdb) vi main.c
Undefined command: "vi".  Try "help".
(gdb) r
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20

Program received signal SIGSEGV, Segmentation fault.
0x080484f2 in CheckPrime (K=3, Prime=0x8049860) at prime.c:13
13	    if (Prime[J] == 1)
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) p J
$1 = 488
(gdb) 
$2 = 488
(gdb) 
$3 = 488
(gdb) 1 CheckPrime
Undefined command: "1".  Try "help".
(gdb) l Checkpr  Prime
1	void CheckPrime(int K, int Prime[])
2	{
3	  int J;
4	
5	  /* the plan:  see if J divides K, for all values J which are
6	      (a) themselves prime (no need to try J if it is nonprime), and
7	      (b) less than or equal to sqrt(K) (if K has a divisor larger
8	          than this square root, it must also have a smaller one,
9	          so no need to check for larger ones) */
10	
(gdb) 
11	  J = 1;
12	  while (1)  {
13	    if (Prime[J] == 1)
14	      if (J % K == 0)  {
15	        Prime[K] = 0;
16	        return;
17	      } /* if */
18	    J++;
19	  } /* while */
20	
(gdb) vi  vi main.c
Undefined command: "vi".  Try "help".
(gdb) mainc .c
Undefined maintenance command: ".c".  Try "help maintenance".
(gdb) q
A debugging session is active.

	Inferior 1 [process 6804] will be killed.

Quit anyway? (y or n) y
[wyung@pc10 ~/gdb]$ m[Kvi main.c
7[?47h[27m[24m[0m[H[J[25;1H"main.c" 29L, 696C[1;1H[1m[36m/* prime-number finding program

 Will (after bugs are fixed) report a list of all primes which are  less than
 or equal to the user-supplied upper bound.   It is riddled with errors! */[0m

[1m[34m#include [0m[1m[35m<stdio.h>[0m
[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[]); [1m[36m/* prototype for function in prime.c */[0m

[1m[32mint[0m Prime[[1m[35m50[0m],  [1m[36m/* Prime[i] will be 1 if i is prime, 0 otherwise */[0m
UpperBound; [1m[36m/* check all number up through this one for primeness */[0m

[1m[32mint[0m main()
{
  [1m[32mint[0m i;

  [30m[43mprintf[0m([1m[35m"Enter upper bound:[0m[1m[31m\n[0m[1m[35m"[0m);
  scanf([1m[35m"[0m[1m[31m%d[0m[1m[35m"[0m, &UpperBound);

  Prime[[1m[35m1[0m] = [1m[35m1[0m;
  Prime[[1m[35m2[0m] = [1m[35m1[0m;

  [1m[33mfor[0m (i = [1m[35m3[0m; i <= UpperBound; i += [1m[35m2[0m) {
    CheckPrime(i, Prime);
    [1m[33mif[0m (Prime[i])[25;63H17,3[10CTop[17;3H[25;64H8,0-1[18;1H[25;64H9,3  [19;3H[25;63H20[20;3H[25;64H1,0-1[21;1H[25;64H0,3  [20;3H[25;63H19[19;3H[25;64H8,0-1[18;1H[25;64H7,3  [17;3H[25;64H6[16;3H[25;64H5,0-1[15;1H[25;64H4,3  [14;3H[25;64H5,0-1[15;1H[25;64H6,3  [16;3H[25;64H7[17;3H[25;64H8,0-1[18;1H[25;64H9,3  [19;3H[25;1H[K[25;1H:q[25;1H[K[25;1H[2J[?47l8[wyung@pc10 ~/gdb]$ vi main.c[K[K[K[K[K[Kc[KChecl[KkPrime.c
7[?47h[27m[24m[0m[H[J[25;1H"CheckPrime.c" [New File][2;1H[1m[34m~                                                                               [3;1H~                                                                               [4;1H~                                                                               [5;1H~                                                                               [6;1H~                                                                               [7;1H~                                                                               [8;1H~                                                                               [9;1H~                                                                               [10;1H~                                                                               [11;1H~                                                                               [12;1H~                                                                               [13;1H~                                                                               [14;1H~                                                                               [15;1H~                                                                               [16;1H~                                                                               [17;1H~                                                                               [18;1H~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [24;1H~                                                                               [0m[25;63H0,0-1[9CAll[1;1H[25;1H[K[25;1H:q![25;1H[K[25;1H[2J[?47l8[wyung@pc10 ~/gdb]$ 
a.out*      core        main.c      prime.c     typescript  
[wyung@pc10 ~/gdb]$ vi prime.c
7[?47h[27m[24m[0m[H[J[25;1H"prime.c" 23L, 629C[1;1H[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[])
{
  [1m[32mint[0m J;

  [1m[36m/* the plan:  see if J divides K, for all values J which are
      (a) themselves prime (no need to try J if it is nonprime), and
      (b) less than or equal to sqrt(K) (if K has a divisor larger
          than this square root, it must also have a smaller one,
          so no need to check for larger ones) */[0m

  J = [1m[35m1[0m;
  [1m[33mwhile[0m ([1m[35m1[0m)  {
    [1m[33mif[0m (Prime[J] == [1m[35m1[0m)[14;7H[1m[33mif[0m (J % K == [1m[35m0[0m)  {[15;9HPrime[K] = [1m[35m0[0m;[16;9H[1m[33mreturn[0m;[17;7H} [1m[36m/* if */[0m
    J++;
  } [1m[36m/* while */

[0m  [1m[36m/* if we get here, then there were no divisors of K, so it is  prime */[0m
  Prime[K] = [1m[35m1[0m;
}  [1m[36m/* CheckPrime() */[0m
[1m[34m~                                                                               [0m[25;63H1,1[11CAll[1;1H
[46m{[23;1H}[0m[25;63H2[2;1H{[23;1H}[25;63H3[3;1H[25;63H4,0-1[4;1H[25;63H5,1  [5;1H[25;63H6[6;1H[25;63H7[7;1H[25;63H8[8;1H[25;63H9[9;1H[25;63H10,0-1[10;1H[25;64H1,1  [11;1H[25;64H2[12;1H[25;64H3[13;1H[25;66H2[13;2H[25;66H3[13;3H[25;66H4[13;4H[25;66H5[13;5H[25;64H4[14;5H[25;66H6[14;6H[25;66H7[14;7H[25;66H8[14;8H[25;66H9[14;9H [46m([10C)[0m[25;66H10[14;10H([10C)[25;67H1[14;11H[25;67H2[14;12H[25;67H3[14;13H[25;67H4[14;14H[25;67H3[14;13H[25;67H2[14;12H[25;67H1[14;11H[25;67H2[14;12H[25;1H[1m-- INSERT --[0m[25;13H[K[25;63H14,12[9CAll[14;12H[25;67H3[14;13H[25;67H2[14;12H % K == [1m[35m0[0m)  {[14;24H[K[14;10H[46m([9C)[0m[25;67H1[14;11HJ % K == [1m[35m[46m0[0m)  {[14;10H([9C[1m[35m0[0m[25;67H2[14;12H[25;67H3[14;13H[25;67H4[14;14H[25;67H5[14;15H[25;67H6[14;16H[25;67H5[14;15H[25;67H4[14;14H[25;67H3[14;13H[25;67H2[14;12H[46m([10C)[0m[25;67H1[14;11H([10C)[25;67H2[14;12H % K == [1m[35m0[0m)  {[14;24H[K[14;10H[46m([9C)[0m[25;67H1[14;11HK % K == [1m[35m[46m0[0m)  {[14;10H([9C[1m[35m0[0m[25;67H2[14;12H[25;67H3[14;13H[25;67H4[14;14H[25;67H5[14;15H[25;67H6[14;16H[25;67H7[14;17H[25;67H6[14;16H == [1m[35m0[0m)  {[14;24H[K[25;67H5[14;15HJ == [1m[35m0[0m)  {[25;67H6[14;16H[15;14H[46m[[0mK[46m][0m[25;64H5[15;16H[25;1H[K[15;15H[K][25;63H15,15[9CAll[15;15H[25;63H[K[25;1H:wq"prime.c" 23L, 629C written
[2J[?47l8[wyung@pc10 ~/gdb]$ gcc -g main.c prime.c
[wyung@pc10 ~/gdb]$ 
a.out*      core        main.c      prime.c     typescript  
[wyung@pc10 ~/gdb]$ gdb a,out[K[K[K[K.out
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
(gdb) r
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20
[Inferior 1 (process 6858) exited normally]
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) b main
Breakpoint 1 at 0x804844d: file main.c, line 16.
(gdb) r
Starting program: /home/wyung/gdb/a.out 

Breakpoint 1, main () at main.c:16
16	  printf("Enter upper bound:\n");
(gdb) n
Enter upper bound:
17	  scanf("%d", &UpperBound);
(gdb) n
20
19	  Prime[1] = 1;
(gdb) p UppweBound
No symbol "UppweBound" in current context.
(gdb) p UppweBoundwe[1P[1P[1@e[1@rB[1P[1@B
$1 = 20
(gdb) n
20	  Prime[2] = 1;
(gdb) n
22	  for (i = 3; i <= UpperBound; i += 2) {
(gdb) n
23	    CheckPrime(i, Prime);
(gdb) n
24	    if (Prime[i]) 
(gdb) n
22	  for (i = 3; i <= UpperBound; i += 2) {
(gdb) p Prime e[]3]
$2 = 0
(gdb) b Checkp Prime
Breakpoint 2 at 0x80484e2: file prime.c, line 11.
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) r
Starting program: /home/wyung/gdb/a.out 

Breakpoint 1, main () at main.c:16
16	  printf("Enter upper bound:\n");
(gdb) c
Continuing.
Enter upper bound:
20

Breakpoint 2, CheckPrime (K=3, Prime=0x8049860) at prime.c:11
11	  J = 1;
(gdb) disp J
1: J = 0
(gdb) n
13	    if (Prime[J] == 1)
1: J = 1
(gdb) s
14	      if (K % J == 0)  {
1: J = 1
(gdb) s
15	        Prime[K] = 0;
1: J = 1
(gdb) q
A debugging session is active.

	Inferior 1 [process 6907] will be killed.

Quit anyway? (y or n) y
[wyung@pc10 ~/gdb]$ vi prime.c
7[?47h[27m[24m[0m[H[J[25;1H"prime.c" 23L, 629C[1;1H[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[])
{
  [1m[32mint[0m J;

  [1m[36m/* the plan:  see if J divides K, for all values J which are
      (a) themselves prime (no need to try J if it is nonprime), and
      (b) less than or equal to sqrt(K) (if K has a divisor larger
          than this square root, it must also have a smaller one,
          so no need to check for larger ones) */[0m

  J = [1m[35m1[0m;
  [1m[33mwhile[0m ([1m[35m1[0m)  {
    [1m[33mif[0m (Prime[J] == [1m[35m1[0m)[14;7H[1m[33mif[0m (K % J == [1m[35m0[0m)  {[15;9HPrime[K] = [1m[35m0[0m;[16;9H[1m[33mreturn[0m;[17;7H} [1m[36m/* if */[0m
    J++;
  } [1m[36m/* while */

[0m  [1m[36m/* if we get here, then there were no divisors of K, so it is  prime */[0m
  Prime[K] = [1m[35m1[0m;
}  [1m[36m/* CheckPrime() */[0m
[1m[34m~                                                                               [0m[25;63H15,9[10CAll[15;9H[25;64H6[16;9H[25;64H5[15;9H[25;66H10[15;10H[14;10H[46m([10C)[0m[25;64H4[14;10H([10C)[25;67H1[14;11H[25;67H2[14;12H[25;64H3[13;12H[25;67H3[13;13He[46m[[0mJ[46m][0m[25;67H4[13;14H[J][25;67H5[13;15H[46m[[0mJ[46m][0m[25;67H6[13;16H[J][25;67H7[13;17H[25;67H8[13;18H[25;67H9[13;19H[25;66H20[13;20H[25;67H1[13;21H[12;14H[46m{[19;3H}[0m[25;64H2,14[12;14H{[19;3H}[25;64H1,8 [11;8H[25;66H7[11;7H[25;66H8[11;8H[25;1H[1m-- INSERT --[0m[25;13H[K[25;63H11,8[10CAll[11;8H;[11;8H[K[25;66H7[11;7H[1m[35m2[0m;[25;66H8[11;8H[25;64H2[12;8H[25;1H[K[12;7H[25;63H12,7[10CAll[12;7H[25;63H[K[25;1H:wq"prime.c" 23L, 629C written
[2J[?47l8[wyung@pc10 ~/gdb]$ 
[wyung@pc10 ~/gdb]$ vi prime.c[21G[Kvi prime.c[21Ggdb a.out[K[22Gcc -g main.c prime.c
[wyung@pc10 ~/gdb]$ gcc -g main.c prime.c[21G[11Pvi[31G[21Ggdb a.out[K
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
(gdb) dq
Undefined command: "dq".  Try "help".
(gdb) d1    d1  1
No breakpoint number 1.
(gdb) b rune    r
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20

Program received signal SIGSEGV, Segmentation fault.
0x080484f2 in CheckPrime (K=3, Prime=0x8049860) at prime.c:13
13	    if (Prime[J] == 1)
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) b CheckPrime
Breakpoint 1 at 0x80484e2: file prime.c, line 11.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20

Breakpoint 1, CheckPrime (K=3, Prime=0x8049860) at prime.c:11
11	  J = 2;
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x080484f2 in CheckPrime (K=3, Prime=0x8049860) at prime.c:13
13	    if (Prime[J] == 1)
(gdb) p J
$1 = 488
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) vi prime.c
Undefined command: "vi".  Try "help".
(gdb) h
List of classes of commands:

aliases -- Aliases of other commands
breakpoints -- Making program stop at certain points
data -- Examining data
files -- Specifying and examining files
internals -- Maintenance commands
obscure -- Obscure features
running -- Running the program
stack -- Examining the stack
status -- Status inquiries
support -- Support facilities
tracepoints -- Tracing of program execution without stopping the program
user-defined -- User-defined commands

Type "help" followed by a class name for a list of commands in that class.
Type "help all" for the list of all commands.
Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) help all

Command class: aliases

ni -- Step one instruction
rc -- Continue program being debugged but run it in reverse
rni -- Step backward one instruction
rsi -- Step backward exactly one instruction
si -- Step one instruction exactly
stepping -- Specify single-stepping behavior at a tracepoint
tp -- Set a tracepoint at specified line or function
tty -- Set terminal for future runs of program being debugged
where -- Print backtrace of all stack frames
ws -- Specify single-stepping behavior at a tracepoint

Command class: breakpoints

awatch -- Set a watchpoint for an expression
break -- Set breakpoint at specified line or function
break-range -- Set a breakpoint for an address range
catch -- Set catchpoints to catch events
catch assert -- Catch failed Ada assertions
catch catch -- Catch an exception
catch exception -- Catch Ada exceptions
catch exec -- Catch calls to exec
---Type <return> to continue, or q <return> to quit---help all[Kq
Quit
(gdb) q
[wyung@pc10 ~/gdb]$ vi prime.c
7[?47h[27m[24m[0m[H[J[25;1H"prime.c" 23L, 629C[1;1H[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[])
{
  [1m[32mint[0m J;

  [1m[36m/* the plan:  see if J divides K, for all values J which are
      (a) themselves prime (no need to try J if it is nonprime), and
      (b) less than or equal to sqrt(K) (if K has a divisor larger
          than this square root, it must also have a smaller one,
          so no need to check for larger ones) */[0m

  J = [1m[35m2[0m;
  [1m[33mwhile[0m ([1m[35m1[0m)  {
    [1m[33mif[0m (Prime[J] == [1m[35m1[0m)[14;7H[1m[33mif[0m (K % J == [1m[35m0[0m)  {[15;9HPrime[K] = [1m[35m0[0m;[16;9H[1m[33mreturn[0m;[17;7H} [1m[36m/* if */[0m
    J++;
  } [1m[36m/* while */

[0m  [1m[36m/* if we get here, then there were no divisors of K, so it is  prime */[0m
  Prime[K] = [1m[35m1[0m;
}  [1m[36m/* CheckPrime() */[0m
[1m[34m~                                                                               [0m[25;63H12,3[10CAll[12;3H[25;64H3[13;3H[25;64H4[14;3H[25;64H5[15;3H[25;64H6[16;3H[25;64H7[17;3H[25;64H8[18;3H[12;14H[46m{[19;3H}[0m[25;64H9[19;3H[12;14H{[19;3H}[25;66H4[19;4H[12;14H[46m{[19;3H}[0m[25;66H3[19;3H[12;14H{[19;3H}[25;66H4[19;4H[25;1H[1m-- INSERT --[0m[25;13H[K[25;63H19,4[10CAll[19;4H [1m[36m/* while */[0m[19;15H[K[25;66H3[19;3H[25;66H4[19;4H[25;66H5[19;5H[25;66H6[19;6H[25;66H7[19;7H[25;66H8[19;8H[25;66H9[19;9H[25;66H10[19;10H[25;67H1[19;11H[25;67H2[19;12H[25;67H3[19;13H[25;67H4[19;14H[25;67H5[19;15H[19;14H[K[21;1H[1m[36m  [0m[1m[37m[41m/[0m[25;67H4[19;14H[19;13H[K[25;67H3[19;13H[19;12H[K[25;67H2[19;12H[19;11H[K[25;67H1[19;11H[19;10H[K[25;67H0[19;10H[19;9H[K[25;66H9 [19;9H[19;8H[K[25;66H8[19;8H[19;7H[K[25;66H7[19;7H[19;6H[K[25;66H6[19;6H/[19;5H[K[21;1H  [1m[36m/[0m[25;66H5[19;5H[19;4H[K[25;66H4[19;4H[25;64H8[18;4H[25;66H5[18;5H[25;66H6[18;6H[25;66H7[18;7H[25;66H8[18;8H[25;66H9[18;9H[18;8H[K[25;66H8[18;8H[18;7H[K[25;66H7[18;7H[18;6H[K[25;66H6[18;6H[18;5H[K[25;66H5[18;5H[25;66H4[18;4H[25;66H3[18;3H[25;66H2[18;2H[25;66H1[18;1H[17;1H[M[17;7H} [1m[36m/* if */[0m[24;1H[1m[34m~                                                                               [0m[25;1H[1m-- INSERT --[0m[50C17,17[9CAll[17;17H[24;1H[K[18;1H[L[25;1H[1m-- INSERT --[0m[50C18,1[10CAll[18;1H[25;64H7[17;1H[25;64H6[16;1H[25;64H5[15;1H[25;64H4[14;1H[25;64H3[13;1H[25;64H2[12;1H[25;64H1[11;1H[25;66H2[11;2H[25;66H3[11;3H[25;66H4[11;4H[25;66H5[11;5H[25;66H6[11;6H[25;66H7[11;7H[25;66H8[11;8H[25;66H9[11;9H[11;8H[K[25;66H8[11;8H[11;7H[K[25;66H7[11;7H[25;66H6[11;6H[11;5H[K[25;66H5[11;5H[25;66H4[11;4H[11;3H[K[25;66H3[11;3H[25;66H2[11;2H[25;66H1[11;1H[25;1H[K[11;1H[25;63H11,0-1[8CAll[11;1H[25;63H[K[25;1H:wq"prime.c" 23L, 601C written
[2J[?47l8[wyung@pc10 ~/gdb]$ gcc [K[K[Kvi prime.c[21Ggdb a.out[K[22Gcc -g main.c prime.c
prime.c: In function 'CheckPrime':
prime.c:23:1: error: expected declaration or statement at end of input
[wyung@pc10 ~/gdb]$ gcc -g main.c prime.c[21G[11Pvi[31G[21Ggdb a.out[K[21Gvi prime.c[21G[11@gcc -g main.c[42G[21G[Kgcc -g main.c prime.c[21G[11Pvi[31G
7[?47h[27m[24m[0m[H[J[25;1H"prime.c" 23L, 601C[1;1H[1m[32mvoid[0m CheckPrime([1m[32mint[0m K, [1m[32mint[0m Prime[])
{
  [1m[32mint[0m J;

  [1m[36m/* the plan:  see if J divides K, for all values J which are
      (a) themselves prime (no need to try J if it is nonprime), and
      (b) less than or equal to sqrt(K) (if K has a divisor larger
          than this square root, it must also have a smaller one,
          so no need to check for larger ones) */[0m[12;3H[1m[33mwhile[0m ([1m[35m1[0m)  {
    [1m[33mif[0m (Prime[J] == [1m[35m1[0m)[14;7H[1m[33mif[0m (K % J == [1m[35m0[0m)  {[15;9HPrime[K] = [1m[35m0[0m;[16;9H[1m[33mreturn[0m;[17;7H} [1m[36m/* if */[21;3H/* if we get here, then there were no divisors of K, so it is  prime */[0m
  Prime[K] = [1m[35m1[0m;
}  [1m[36m/* CheckPrime() */[0m
[1m[34m~                                                                               [0m[25;63H11,0-1[8CAll[11;1H[25;64H2,1  [12;1H[25;64H3[13;1H[25;64H2[12;1H[25;64H1,0-1[11;1H[25;64H2,1  [12;1H[25;66H2[12;2H[25;66H3[12;3H[25;66H4[12;4H[25;66H5[12;5H[25;66H6[12;6H[25;66H7[12;7H[25;66H8[12;8H [46m([1C)[0m[25;66H9[12;9H([1C)[25;66H10[12;10H[46m([1C)[0m[25;67H1[12;11H([1C)[25;67H2[12;12H[25;67H3[12;13H [46m{[23;1H}[0m[25;67H4[12;14H{[23;1H}[25;67H3[12;13H[25;67H2[12;12H[46m([1C)[0m[25;67H1[12;11H([1C)[25;67H0[12;10H[25;64H1,0-1[11;1H[25;64H2,10 [12;10H[25;64H3[13;10H[14;10H[46m([10C)[0m[25;64H4[14;10H([10C)[25;64H5[15;10H[25;64H6[16;10H[25;64H7[17;10H[25;66H9 [17;9H[25;64H8,0-1[18;1H[25;64H9,3  [19;3H[25;63H20,0-1[20;1H[25;64H1,9  [21;9H[25;64H2[22;9H[25;64H3[23;9H[25;64H2[22;9H[46m[[0mK[46m][0m[25;66H8[22;8H[K][25;66H7[22;7H[25;66H6[22;6H[25;64H1[21;6H[25;64H0,0-1[20;1H[25;63H19,3  [19;3H[25;64H8,0-1[18;1H[25;64H7,6  [17;6H[25;64H6[16;6H[25;64H5[15;6H[25;64H4[14;6H[25;64H3[13;6H[25;64H4[14;6H[25;64H5[15;6H[25;64H6[16;6H[25;64H7[17;6H[14;24H[46m{[17;7H}[0m[25;66H7[17;7H[14;24H{[17;7H}[25;66H8[17;8H[25;66H9[17;9H[25;66H10[17;10H[25;67H1[17;11H[25;67H2[17;12H[25;67H3[17;13H[25;67H4[17;14H[25;67H5[17;15H[25;67H6[17;16H[25;64H6,15[16;15H[15;14H[46m[[0mK[46m][0m[25;64H5,16[15;16H[K][25;64H4[14;16H[25;67H7[14;17H[25;67H8[14;18H[25;67H9[14;19H[25;66H20[14;20H[14;10H[46m([10C)[0m[25;67H1[14;21H[14;10H([10C)[25;67H2[14;22H[25;67H3[14;23H [46m{[17;7H}[0m[25;67H4[14;24H{[17;7H}[25;64H5,21[15;21H[25;64H6,15[16;15H[25;64H7,16[17;16H[25;64H8,0-1[18;1H[25;64H9,3  [19;3H[25;64H8,0-1[18;1H[25;64H7,16 [17;16H[25;64H6,15[16;15H[25;64H5,21[15;21H[14;24H[46m{[17;7H}[0m[25;64H4,24[14;24H[13;8H[46m([13C)[0m[14;24H{[17;7H}[25;64H3,22[13;22H[13;8H([13C)[25;67H1[13;21H[12;14H[46m{[23;1H}[0m[25;64H2,14[12;14H{[23;1H}[25;67H3[12;13H[25;67H2[12;12H[25;1H[1m-- INSERT --[0m[25;13H[K[25;63H12,12[9CAll[12;12H  [1m[37m[41m{[0m[12;14H[K[14;24H[1m[37m[41m{[17;7H}[23;1H}[0m[25;67H1[12;11H  [1m[37m[41m{[0m[12;13H[K[25;67H0[12;10H  {[12;12H[K[14;24H{[17;7H}[23;1H}[25;66H9 [12;9H {[12;11H[K[25;66H8[12;8H  whil  {[12;10H[K[25;66H7[12;7H  {[12;9H[K[25;66H6[12;6H  {[12;8H[K[25;66H5[12;5H  {[12;7H[K[25;66H4[12;4H  {[12;6H[K[25;66H3[12;3Hf  {[25;66H4[12;4Ho  {[25;66H5[12;5H[1m[33mfor[0m  {[25;66H6[12;6H   {[25;66H7[12;7H {[12;9H[K[25;66H6[12;6H(  [1m[37m[41m{[14;24H{[17;7H}[23;1H}[0m[25;66H7[12;7HJ  [1m[37m[41m{[0m[25;66H8[12;8H   [1m[37m[41m{[0m[25;66H9[12;9H=  [1m[37m[41m{[0m[25;66H10[12;10H   [1m[37m[41m{[0m[25;67H1[12;11H[1m[35m2[0m  [1m[37m[41m{[0m[25;67H2[12;12H;  [1m[37m[41m{[0m[25;67H3[12;13H   [1m[37m[41m{[0m[25;67H4[12;14HJ  [1m[37m[41m{[0m[25;67H5[12;15H   [1m[37m[41m{[0m[25;67H6[12;16H*  [1m[37m[41m{[0m[25;67H7[12;17H   [1m[37m[41m{[0m[25;67H8[12;18HJ  [1m[37m[41m{[0m[25;67H9[12;19H   [1m[37m[41m{[0m[25;66H20[12;20H<  [1m[37m[41m{[0m[25;67H1[12;21H=  [1m[37m[41m{[0m[25;67H2[12;22HK  [1m[37m[41m{[0m[25;67H3[12;23H;  [1m[37m[41m{[0m[25;67H4[12;24H   [1m[37m[41m{[0m[25;67H5[12;25HJ  [1m[37m[41m{[0m[25;67H6[12;26H+  [1m[37m[41m{[0m[25;67H7[12;27H+  [1m[37m[41m{[0m[25;67H8[12;28H)  {[14;24H{[17;7H}[23;1H}[12;6H[46m([21C)[0m[25;67H9[12;29H[12;6H([21C)[25;66H30[12;30H [46m{[23;1H}[0m[25;67H1[12;31H[25;67H2[12;32H[12;31H[K[23;1H}[25;67H1[12;31H[25;67H0[12;30H[12;6H[46m([21C)[0m[25;66H29[12;29H[25;1H[K[12;28H[25;63H12,28[9CAll[12;28H[25;63H[K[25;1H:wq"prime.c" 23L, 615C written
[2J[?47l8[wyung@pc10 ~/gdb]$ vi prime.c[21G[11@gcc -g main.c[42G
[wyung@pc10 ~/gdb]$ gcc -g main.c prime.c[21G[11Pvi[31G[21Ggdb a.out[K[21Gvi CheckPrime.c[21Ggdb a.out[K
GNU gdb (GDB) Fedora (7.3.1-45.fc15)
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/wyung/gdb/a.out...done.
(gdb) d
(gdb) r
Starting program: /home/wyung/gdb/a.out 
Enter upper bound:
20
3 is a prime
5 is a prime
7 is a prime
11 is a prime
13 is a prime
17 is a prime
19 is a prime
[Inferior 1 (process 7039) exited normally]
Missing separate debuginfos, use: debuginfo-install glibc-2.14-5.i686
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) q
[wyung@pc10 ~/gdb]$ exit
exit

Script done on Sun 06 Nov 2011 08:44:05 PM PST
